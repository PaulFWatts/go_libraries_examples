package templates

import "fmt"

type Todo struct {
	ID        int    `json:"id"`
	Text      string `json:"text"`
	Completed bool   `json:"completed"`
}

templ TodoApp(todos []Todo) {
	@Base("Todo App - Templ Demo") {
		<div class="container py-5">
			<div class="row justify-content-center">
				<div class="col-lg-8">
					<div class="card shadow">
						<div class="card-header bg-primary text-white">
							<h1 class="h3 mb-0 text-center">
								<i class="bi bi-list-check"></i> Todo Application
							</h1>
						</div>
						<div class="card-body">
							<!-- Add Todo Form -->
							@TodoForm()
							
							<!-- Todo Stats -->
							@TodoStats(todos)
							
							<!-- Todo List -->
							<div id="todo-list">
								@TodoList(todos)
							</div>
							
							<!-- Filter Buttons -->
							<div class="d-flex justify-content-center mt-4">
								<div class="btn-group" role="group">
									<button type="button" class="btn btn-outline-primary active" data-filter="all">
										All ({ fmt.Sprintf("%d", len(todos)) })
									</button>
									<button type="button" class="btn btn-outline-success" data-filter="completed">
										Completed ({ fmt.Sprintf("%d", countCompleted(todos)) })
									</button>
									<button type="button" class="btn btn-outline-warning" data-filter="pending">
										Pending ({ fmt.Sprintf("%d", countPending(todos)) })
									</button>
								</div>
							</div>
						</div>
					</div>
					
					<!-- Code Example -->
					<div class="mt-5">
						<h3>Implementation Details</h3>
						<div class="code-block">
							<h6>Todo Component Structure:</h6>
							<pre><code class="language-go">// Todo data structure
type Todo struct {
  ID        int    `json:"id"`
  Text      string `json:"text"`
  Completed bool   `json:"completed"`
}

// Main todo app template
templ TodoApp(todos []Todo) {
  @Base("Todo App") {
    @TodoForm()
    @TodoStats(todos)
    @TodoList(todos)
  }
}

// Individual todo item
templ TodoItem(todo Todo) {
  &lt;div class="todo-item" data-id={ fmt.Sprintf("%d", todo.ID) }&gt;
    if todo.Completed {
      &lt;s&gt;{ todo.Text }&lt;/s&gt;
    } else {
      { todo.Text }
    }
  &lt;/div&gt;
}</code></pre>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ TodoForm() {
	<form class="mb-4" action="/todo" method="post">
		<div class="input-group">
			<input 
				type="text" 
				class="form-control form-control-lg" 
				name="text" 
				placeholder="Add a new todo..." 
				required
			/>
			<button class="btn btn-primary btn-lg" type="submit">
				<i class="bi bi-plus-lg"></i> Add Todo
			</button>
		</div>
	</form>
}

templ TodoStats(todos []Todo) {
	<div class="row text-center mb-4">
		<div class="col-md-4">
			<div class="card bg-light">
				<div class="card-body">
					<h5 class="card-title text-primary">{ fmt.Sprintf("%d", len(todos)) }</h5>
					<p class="card-text text-muted">Total Tasks</p>
				</div>
			</div>
		</div>
		<div class="col-md-4">
			<div class="card bg-light">
				<div class="card-body">
					<h5 class="card-title text-success">{ fmt.Sprintf("%d", countCompleted(todos)) }</h5>
					<p class="card-text text-muted">Completed</p>
				</div>
			</div>
		</div>
		<div class="col-md-4">
			<div class="card bg-light">
				<div class="card-body">
					<h5 class="card-title text-warning">{ fmt.Sprintf("%d", countPending(todos)) }</h5>
					<p class="card-text text-muted">Pending</p>
				</div>
			</div>
		</div>
	</div>
}

templ TodoList(todos []Todo) {
	<div class="todo-container">
		if len(todos) == 0 {
			<div class="text-center py-5">
				<i class="bi bi-list-ul display-1 text-muted"></i>
				<h4 class="text-muted mt-3">No todos yet</h4>
				<p class="text-muted">Add your first todo above to get started!</p>
			</div>
		} else {
			for _, todo := range todos {
				@TodoItem(todo)
			}
		}
	</div>
}

templ TodoItem(todo Todo) {
	<div class={ "card mb-2 todo-item", getCompletedClass(todo.Completed) } data-id={ fmt.Sprintf("%d", todo.ID) }>
		<div class="card-body py-3">
			<div class="d-flex align-items-center">
				<div class="form-check me-3">
					<input 
						class="form-check-input" 
						type="checkbox" 
						id={ fmt.Sprintf("todo-%d", todo.ID) }
						if todo.Completed {
							checked
						}
						onchange={ fmt.Sprintf("toggleTodo(%d)", todo.ID) }
					/>
				</div>
				<div class="flex-grow-1">
					if todo.Completed {
						<s class="text-muted">{ todo.Text }</s>
					} else {
						<span>{ todo.Text }</span>
					}
				</div>
				<div class="btn-group btn-group-sm">
					<button 
						class="btn btn-outline-primary" 
						onclick={ fmt.Sprintf("editTodo(%d)", todo.ID) }
						title="Edit"
					>
						<i class="bi bi-pencil"></i>
					</button>
					<button 
						class="btn btn-outline-danger" 
						onclick={ fmt.Sprintf("deleteTodo(%d)", todo.ID) }
						title="Delete"
					>
						<i class="bi bi-trash"></i>
					</button>
				</div>
			</div>
		</div>
	</div>
}

// Helper functions
func countCompleted(todos []Todo) int {
	count := 0
	for _, todo := range todos {
		if todo.Completed {
			count++
		}
	}
	return count
}

func countPending(todos []Todo) int {
	count := 0
	for _, todo := range todos {
		if !todo.Completed {
			count++
		}
	}
	return count
}

func getCompletedClass(completed bool) string {
	if completed {
		return "border-success"
	}
	return "border-primary"
}

script TodoScript() {
	function toggleTodo(id) {
		fetch(`/todo/${id}/toggle`, {
			method: 'POST',
		}).then(() => {
			location.reload();
		});
	}
	
	function deleteTodo(id) {
		if (confirm('Are you sure you want to delete this todo?')) {
			fetch(`/todo/${id}`, {
				method: 'DELETE',
			}).then(() => {
				location.reload();
			});
		}
	}
	
	function editTodo(id) {
		const newText = prompt('Edit todo:');
		if (newText && newText.trim()) {
			fetch(`/todo/${id}`, {
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ text: newText.trim() }),
			}).then(() => {
				location.reload();
			});
		}
	}
	
	// Filter functionality
	document.querySelectorAll('[data-filter]').forEach(btn => {
		btn.addEventListener('click', function() {
			const filter = this.getAttribute('data-filter');
			const todos = document.querySelectorAll('.todo-item');
			
			// Update active button
			document.querySelectorAll('[data-filter]').forEach(b => b.classList.remove('active'));
			this.classList.add('active');
			
			// Filter todos
			todos.forEach(todo => {
				const checkbox = todo.querySelector('input[type="checkbox"]');
				const isCompleted = checkbox.checked;
				
				let show = false;
				if (filter === 'all') show = true;
				else if (filter === 'completed') show = isCompleted;
				else if (filter === 'pending') show = !isCompleted;
				
				todo.style.display = show ? 'block' : 'none';
			});
		});
	});
}
