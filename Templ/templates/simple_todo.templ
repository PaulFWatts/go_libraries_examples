package templates

import "fmt"

type Todo struct {
	ID        int    `json:"id"`
	Text      string `json:"text"`
	Completed bool   `json:"completed"`
}

type User struct {
	ID    int    `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Role  string `json:"role"`
}

templ TodoPage(todos []Todo) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>Todo App - Templ Demo</title>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"/>
	</head>
	<body>
		<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
			<div class="container">
				<a class="navbar-brand" href="/"><strong>Templ Demo</strong></a>
				<div class="navbar-nav ms-auto">
					<a class="nav-link" href="/">Home</a>
					<a class="nav-link active" href="/todo">Todo App</a>
				</div>
			</div>
		</nav>
		
		<div class="container py-5">
			<div class="row justify-content-center">
				<div class="col-lg-8">
					<div class="card shadow">
						<div class="card-header bg-primary text-white">
							<h1 class="h3 mb-0 text-center">Todo Application</h1>
						</div>
						<div class="card-body">
							<!-- Add Todo Form -->
							<form class="mb-4" action="/todo" method="post">
								<div class="input-group">
									<input 
										type="text" 
										class="form-control form-control-lg" 
										name="text" 
										placeholder="Add a new todo..." 
										required
									/>
									<button class="btn btn-primary btn-lg" type="submit">
										Add Todo
									</button>
								</div>
							</form>
							
							<!-- Todo Stats -->
							<div class="row text-center mb-4">
								<div class="col-md-4">
									<div class="card bg-light">
										<div class="card-body">
											<h5 class="card-title text-primary">{ fmt.Sprintf("%d", len(todos)) }</h5>
											<p class="card-text text-muted">Total Tasks</p>
										</div>
									</div>
								</div>
								<div class="col-md-4">
									<div class="card bg-light">
										<div class="card-body">
											<h5 class="card-title text-success">{ fmt.Sprintf("%d", countCompleted(todos)) }</h5>
											<p class="card-text text-muted">Completed</p>
										</div>
									</div>
								</div>
								<div class="col-md-4">
									<div class="card bg-light">
										<div class="card-body">
											<h5 class="card-title text-warning">{ fmt.Sprintf("%d", countPending(todos)) }</h5>
											<p class="card-text text-muted">Pending</p>
										</div>
									</div>
								</div>
							</div>
							
							<!-- Todo List -->
							<div id="todo-list">
								if len(todos) == 0 {
									<div class="text-center py-5">
										<h4 class="text-muted mt-3">No todos yet</h4>
										<p class="text-muted">Add your first todo above to get started!</p>
									</div>
								} else {
									for _, todo := range todos {
										@TodoItem(todo)
									}
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
	</body>
	</html>
}

templ TodoItem(todo Todo) {
	<div class={ "card mb-2 todo-item", getCompletedClass(todo.Completed) } data-id={ fmt.Sprintf("%d", todo.ID) }>
		<div class="card-body py-3">
			<div class="d-flex align-items-center">
				<div class="form-check me-3">
					<input 
						class="form-check-input" 
						type="checkbox" 
						id={ fmt.Sprintf("todo-%d", todo.ID) }
						if todo.Completed {
							checked
						}
					/>
				</div>
				<div class="flex-grow-1">
					if todo.Completed {
						<s class="text-muted">{ todo.Text }</s>
					} else {
						<span>{ todo.Text }</span>
					}
				</div>
				<div class="btn-group btn-group-sm">
					<button class="btn btn-outline-primary" title="Edit">Edit</button>
					<button class="btn btn-outline-danger" title="Delete">Delete</button>
				</div>
			</div>
		</div>
	</div>
}

// Helper functions
func countCompleted(todos []Todo) int {
	count := 0
	for _, todo := range todos {
		if todo.Completed {
			count++
		}
	}
	return count
}

func countPending(todos []Todo) int {
	count := 0
	for _, todo := range todos {
		if !todo.Completed {
			count++
		}
	}
	return count
}

func getCompletedClass(completed bool) string {
	if completed {
		return "border-success"
	}
	return "border-primary"
}
